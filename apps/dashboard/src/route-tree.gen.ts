/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as RegisterImport } from './routes/register'
import { Route as LoginImport } from './routes/login'
import { Route as ConfirmEmailImport } from './routes/confirm-email'
import { Route as MainImport } from './routes/_main'
import { Route as MainServicesRouteImport } from './routes/_main/services/route'
import { Route as MainQuizesRouteImport } from './routes/_main/quizes/route'
import { Route as MainProjectsRouteImport } from './routes/_main/projects/route'
import { Route as MainNotificationsRouteImport } from './routes/_main/notifications/route'
import { Route as MainDomainsRouteImport } from './routes/_main/domains/route'
import { Route as MainIndexRouteImport } from './routes/_main/index/route'
import { Route as MainServicesNewRouteImport } from './routes/_main/services/new/route'
import { Route as MainProjectsNewRouteImport } from './routes/_main/projects/new/route'
import { Route as MainAccountGeneralRouteImport } from './routes/_main/account/general/route'
import { Route as MainServicesNewServiceIdRouteImport } from './routes/_main/services/new/$serviceId/route'

// Create/Update Routes

const RegisterRoute = RegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const ConfirmEmailRoute = ConfirmEmailImport.update({
  id: '/confirm-email',
  path: '/confirm-email',
  getParentRoute: () => rootRoute,
} as any)

const MainRoute = MainImport.update({
  id: '/_main',
  getParentRoute: () => rootRoute,
} as any)

const MainServicesRouteRoute = MainServicesRouteImport.update({
  id: '/services',
  path: '/services',
  getParentRoute: () => MainRoute,
} as any)

const MainQuizesRouteRoute = MainQuizesRouteImport.update({
  id: '/quizes',
  path: '/quizes',
  getParentRoute: () => MainRoute,
} as any)

const MainProjectsRouteRoute = MainProjectsRouteImport.update({
  id: '/projects',
  path: '/projects',
  getParentRoute: () => MainRoute,
} as any)

const MainNotificationsRouteRoute = MainNotificationsRouteImport.update({
  id: '/notifications',
  path: '/notifications',
  getParentRoute: () => MainRoute,
} as any)

const MainDomainsRouteRoute = MainDomainsRouteImport.update({
  id: '/domains',
  path: '/domains',
  getParentRoute: () => MainRoute,
} as any)

const MainIndexRouteRoute = MainIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => MainRoute,
} as any)

const MainServicesNewRouteRoute = MainServicesNewRouteImport.update({
  id: '/new',
  path: '/new',
  getParentRoute: () => MainServicesRouteRoute,
} as any)

const MainProjectsNewRouteRoute = MainProjectsNewRouteImport.update({
  id: '/new',
  path: '/new',
  getParentRoute: () => MainProjectsRouteRoute,
} as any)

const MainAccountGeneralRouteRoute = MainAccountGeneralRouteImport.update({
  id: '/account/general',
  path: '/account/general',
  getParentRoute: () => MainRoute,
} as any)

const MainServicesNewServiceIdRouteRoute =
  MainServicesNewServiceIdRouteImport.update({
    id: '/$serviceId',
    path: '/$serviceId',
    getParentRoute: () => MainServicesNewRouteRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_main': {
      id: '/_main'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof MainImport
      parentRoute: typeof rootRoute
    }
    '/confirm-email': {
      id: '/confirm-email'
      path: '/confirm-email'
      fullPath: '/confirm-email'
      preLoaderRoute: typeof ConfirmEmailImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterImport
      parentRoute: typeof rootRoute
    }
    '/_main/': {
      id: '/_main/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof MainIndexRouteImport
      parentRoute: typeof MainImport
    }
    '/_main/domains': {
      id: '/_main/domains'
      path: '/domains'
      fullPath: '/domains'
      preLoaderRoute: typeof MainDomainsRouteImport
      parentRoute: typeof MainImport
    }
    '/_main/notifications': {
      id: '/_main/notifications'
      path: '/notifications'
      fullPath: '/notifications'
      preLoaderRoute: typeof MainNotificationsRouteImport
      parentRoute: typeof MainImport
    }
    '/_main/projects': {
      id: '/_main/projects'
      path: '/projects'
      fullPath: '/projects'
      preLoaderRoute: typeof MainProjectsRouteImport
      parentRoute: typeof MainImport
    }
    '/_main/quizes': {
      id: '/_main/quizes'
      path: '/quizes'
      fullPath: '/quizes'
      preLoaderRoute: typeof MainQuizesRouteImport
      parentRoute: typeof MainImport
    }
    '/_main/services': {
      id: '/_main/services'
      path: '/services'
      fullPath: '/services'
      preLoaderRoute: typeof MainServicesRouteImport
      parentRoute: typeof MainImport
    }
    '/_main/account/general': {
      id: '/_main/account/general'
      path: '/account/general'
      fullPath: '/account/general'
      preLoaderRoute: typeof MainAccountGeneralRouteImport
      parentRoute: typeof MainImport
    }
    '/_main/projects/new': {
      id: '/_main/projects/new'
      path: '/new'
      fullPath: '/projects/new'
      preLoaderRoute: typeof MainProjectsNewRouteImport
      parentRoute: typeof MainProjectsRouteImport
    }
    '/_main/services/new': {
      id: '/_main/services/new'
      path: '/new'
      fullPath: '/services/new'
      preLoaderRoute: typeof MainServicesNewRouteImport
      parentRoute: typeof MainServicesRouteImport
    }
    '/_main/services/new/$serviceId': {
      id: '/_main/services/new/$serviceId'
      path: '/$serviceId'
      fullPath: '/services/new/$serviceId'
      preLoaderRoute: typeof MainServicesNewServiceIdRouteImport
      parentRoute: typeof MainServicesNewRouteImport
    }
  }
}

// Create and export the route tree

interface MainProjectsRouteRouteChildren {
  MainProjectsNewRouteRoute: typeof MainProjectsNewRouteRoute
}

const MainProjectsRouteRouteChildren: MainProjectsRouteRouteChildren = {
  MainProjectsNewRouteRoute: MainProjectsNewRouteRoute,
}

const MainProjectsRouteRouteWithChildren =
  MainProjectsRouteRoute._addFileChildren(MainProjectsRouteRouteChildren)

interface MainServicesNewRouteRouteChildren {
  MainServicesNewServiceIdRouteRoute: typeof MainServicesNewServiceIdRouteRoute
}

const MainServicesNewRouteRouteChildren: MainServicesNewRouteRouteChildren = {
  MainServicesNewServiceIdRouteRoute: MainServicesNewServiceIdRouteRoute,
}

const MainServicesNewRouteRouteWithChildren =
  MainServicesNewRouteRoute._addFileChildren(MainServicesNewRouteRouteChildren)

interface MainServicesRouteRouteChildren {
  MainServicesNewRouteRoute: typeof MainServicesNewRouteRouteWithChildren
}

const MainServicesRouteRouteChildren: MainServicesRouteRouteChildren = {
  MainServicesNewRouteRoute: MainServicesNewRouteRouteWithChildren,
}

const MainServicesRouteRouteWithChildren =
  MainServicesRouteRoute._addFileChildren(MainServicesRouteRouteChildren)

interface MainRouteChildren {
  MainIndexRouteRoute: typeof MainIndexRouteRoute
  MainDomainsRouteRoute: typeof MainDomainsRouteRoute
  MainNotificationsRouteRoute: typeof MainNotificationsRouteRoute
  MainProjectsRouteRoute: typeof MainProjectsRouteRouteWithChildren
  MainQuizesRouteRoute: typeof MainQuizesRouteRoute
  MainServicesRouteRoute: typeof MainServicesRouteRouteWithChildren
  MainAccountGeneralRouteRoute: typeof MainAccountGeneralRouteRoute
}

const MainRouteChildren: MainRouteChildren = {
  MainIndexRouteRoute: MainIndexRouteRoute,
  MainDomainsRouteRoute: MainDomainsRouteRoute,
  MainNotificationsRouteRoute: MainNotificationsRouteRoute,
  MainProjectsRouteRoute: MainProjectsRouteRouteWithChildren,
  MainQuizesRouteRoute: MainQuizesRouteRoute,
  MainServicesRouteRoute: MainServicesRouteRouteWithChildren,
  MainAccountGeneralRouteRoute: MainAccountGeneralRouteRoute,
}

const MainRouteWithChildren = MainRoute._addFileChildren(MainRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof MainRouteWithChildren
  '/confirm-email': typeof ConfirmEmailRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/': typeof MainIndexRouteRoute
  '/domains': typeof MainDomainsRouteRoute
  '/notifications': typeof MainNotificationsRouteRoute
  '/projects': typeof MainProjectsRouteRouteWithChildren
  '/quizes': typeof MainQuizesRouteRoute
  '/services': typeof MainServicesRouteRouteWithChildren
  '/account/general': typeof MainAccountGeneralRouteRoute
  '/projects/new': typeof MainProjectsNewRouteRoute
  '/services/new': typeof MainServicesNewRouteRouteWithChildren
  '/services/new/$serviceId': typeof MainServicesNewServiceIdRouteRoute
}

export interface FileRoutesByTo {
  '/confirm-email': typeof ConfirmEmailRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/': typeof MainIndexRouteRoute
  '/domains': typeof MainDomainsRouteRoute
  '/notifications': typeof MainNotificationsRouteRoute
  '/projects': typeof MainProjectsRouteRouteWithChildren
  '/quizes': typeof MainQuizesRouteRoute
  '/services': typeof MainServicesRouteRouteWithChildren
  '/account/general': typeof MainAccountGeneralRouteRoute
  '/projects/new': typeof MainProjectsNewRouteRoute
  '/services/new': typeof MainServicesNewRouteRouteWithChildren
  '/services/new/$serviceId': typeof MainServicesNewServiceIdRouteRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_main': typeof MainRouteWithChildren
  '/confirm-email': typeof ConfirmEmailRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/_main/': typeof MainIndexRouteRoute
  '/_main/domains': typeof MainDomainsRouteRoute
  '/_main/notifications': typeof MainNotificationsRouteRoute
  '/_main/projects': typeof MainProjectsRouteRouteWithChildren
  '/_main/quizes': typeof MainQuizesRouteRoute
  '/_main/services': typeof MainServicesRouteRouteWithChildren
  '/_main/account/general': typeof MainAccountGeneralRouteRoute
  '/_main/projects/new': typeof MainProjectsNewRouteRoute
  '/_main/services/new': typeof MainServicesNewRouteRouteWithChildren
  '/_main/services/new/$serviceId': typeof MainServicesNewServiceIdRouteRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/confirm-email'
    | '/login'
    | '/register'
    | '/'
    | '/domains'
    | '/notifications'
    | '/projects'
    | '/quizes'
    | '/services'
    | '/account/general'
    | '/projects/new'
    | '/services/new'
    | '/services/new/$serviceId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/confirm-email'
    | '/login'
    | '/register'
    | '/'
    | '/domains'
    | '/notifications'
    | '/projects'
    | '/quizes'
    | '/services'
    | '/account/general'
    | '/projects/new'
    | '/services/new'
    | '/services/new/$serviceId'
  id:
    | '__root__'
    | '/_main'
    | '/confirm-email'
    | '/login'
    | '/register'
    | '/_main/'
    | '/_main/domains'
    | '/_main/notifications'
    | '/_main/projects'
    | '/_main/quizes'
    | '/_main/services'
    | '/_main/account/general'
    | '/_main/projects/new'
    | '/_main/services/new'
    | '/_main/services/new/$serviceId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  MainRoute: typeof MainRouteWithChildren
  ConfirmEmailRoute: typeof ConfirmEmailRoute
  LoginRoute: typeof LoginRoute
  RegisterRoute: typeof RegisterRoute
}

const rootRouteChildren: RootRouteChildren = {
  MainRoute: MainRouteWithChildren,
  ConfirmEmailRoute: ConfirmEmailRoute,
  LoginRoute: LoginRoute,
  RegisterRoute: RegisterRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_main",
        "/confirm-email",
        "/login",
        "/register"
      ]
    },
    "/_main": {
      "filePath": "_main.tsx",
      "children": [
        "/_main/",
        "/_main/domains",
        "/_main/notifications",
        "/_main/projects",
        "/_main/quizes",
        "/_main/services",
        "/_main/account/general"
      ]
    },
    "/confirm-email": {
      "filePath": "confirm-email.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/register": {
      "filePath": "register.tsx"
    },
    "/_main/": {
      "filePath": "_main/index/route.tsx",
      "parent": "/_main"
    },
    "/_main/domains": {
      "filePath": "_main/domains/route.tsx",
      "parent": "/_main"
    },
    "/_main/notifications": {
      "filePath": "_main/notifications/route.tsx",
      "parent": "/_main"
    },
    "/_main/projects": {
      "filePath": "_main/projects/route.tsx",
      "parent": "/_main",
      "children": [
        "/_main/projects/new"
      ]
    },
    "/_main/quizes": {
      "filePath": "_main/quizes/route.tsx",
      "parent": "/_main"
    },
    "/_main/services": {
      "filePath": "_main/services/route.tsx",
      "parent": "/_main",
      "children": [
        "/_main/services/new"
      ]
    },
    "/_main/account/general": {
      "filePath": "_main/account/general/route.tsx",
      "parent": "/_main"
    },
    "/_main/projects/new": {
      "filePath": "_main/projects/new/route.tsx",
      "parent": "/_main/projects"
    },
    "/_main/services/new": {
      "filePath": "_main/services/new/route.tsx",
      "parent": "/_main/services",
      "children": [
        "/_main/services/new/$serviceId"
      ]
    },
    "/_main/services/new/$serviceId": {
      "filePath": "_main/services/new/$serviceId/route.tsx",
      "parent": "/_main/services/new"
    }
  }
}
ROUTE_MANIFEST_END */

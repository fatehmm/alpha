/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SetupAdminImport } from './routes/setup-admin'
import { Route as LoginImport } from './routes/login'
import { Route as ConfirmEmailImport } from './routes/confirm-email'
import { Route as MainImport } from './routes/_main'
import { Route as MainWorkspacesRouteImport } from './routes/_main/workspaces/route'
import { Route as MainUsersRouteImport } from './routes/_main/users/route'
import { Route as MainQuizesRouteImport } from './routes/_main/quizes/route'
import { Route as MainNotificationsRouteImport } from './routes/_main/notifications/route'
import { Route as MainDomainsRouteImport } from './routes/_main/domains/route'
import { Route as MainIndexRouteImport } from './routes/_main/index/route'
import { Route as MainAccountGeneralRouteImport } from './routes/_main/account/general/route'

// Create/Update Routes

const SetupAdminRoute = SetupAdminImport.update({
  id: '/setup-admin',
  path: '/setup-admin',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const ConfirmEmailRoute = ConfirmEmailImport.update({
  id: '/confirm-email',
  path: '/confirm-email',
  getParentRoute: () => rootRoute,
} as any)

const MainRoute = MainImport.update({
  id: '/_main',
  getParentRoute: () => rootRoute,
} as any)

const MainWorkspacesRouteRoute = MainWorkspacesRouteImport.update({
  id: '/workspaces',
  path: '/workspaces',
  getParentRoute: () => MainRoute,
} as any)

const MainUsersRouteRoute = MainUsersRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => MainRoute,
} as any)

const MainQuizesRouteRoute = MainQuizesRouteImport.update({
  id: '/quizes',
  path: '/quizes',
  getParentRoute: () => MainRoute,
} as any)

const MainNotificationsRouteRoute = MainNotificationsRouteImport.update({
  id: '/notifications',
  path: '/notifications',
  getParentRoute: () => MainRoute,
} as any)

const MainDomainsRouteRoute = MainDomainsRouteImport.update({
  id: '/domains',
  path: '/domains',
  getParentRoute: () => MainRoute,
} as any)

const MainIndexRouteRoute = MainIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => MainRoute,
} as any)

const MainAccountGeneralRouteRoute = MainAccountGeneralRouteImport.update({
  id: '/account/general',
  path: '/account/general',
  getParentRoute: () => MainRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_main': {
      id: '/_main'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof MainImport
      parentRoute: typeof rootRoute
    }
    '/confirm-email': {
      id: '/confirm-email'
      path: '/confirm-email'
      fullPath: '/confirm-email'
      preLoaderRoute: typeof ConfirmEmailImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/setup-admin': {
      id: '/setup-admin'
      path: '/setup-admin'
      fullPath: '/setup-admin'
      preLoaderRoute: typeof SetupAdminImport
      parentRoute: typeof rootRoute
    }
    '/_main/': {
      id: '/_main/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof MainIndexRouteImport
      parentRoute: typeof MainImport
    }
    '/_main/domains': {
      id: '/_main/domains'
      path: '/domains'
      fullPath: '/domains'
      preLoaderRoute: typeof MainDomainsRouteImport
      parentRoute: typeof MainImport
    }
    '/_main/notifications': {
      id: '/_main/notifications'
      path: '/notifications'
      fullPath: '/notifications'
      preLoaderRoute: typeof MainNotificationsRouteImport
      parentRoute: typeof MainImport
    }
    '/_main/quizes': {
      id: '/_main/quizes'
      path: '/quizes'
      fullPath: '/quizes'
      preLoaderRoute: typeof MainQuizesRouteImport
      parentRoute: typeof MainImport
    }
    '/_main/users': {
      id: '/_main/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof MainUsersRouteImport
      parentRoute: typeof MainImport
    }
    '/_main/workspaces': {
      id: '/_main/workspaces'
      path: '/workspaces'
      fullPath: '/workspaces'
      preLoaderRoute: typeof MainWorkspacesRouteImport
      parentRoute: typeof MainImport
    }
    '/_main/account/general': {
      id: '/_main/account/general'
      path: '/account/general'
      fullPath: '/account/general'
      preLoaderRoute: typeof MainAccountGeneralRouteImport
      parentRoute: typeof MainImport
    }
  }
}

// Create and export the route tree

interface MainRouteChildren {
  MainIndexRouteRoute: typeof MainIndexRouteRoute
  MainDomainsRouteRoute: typeof MainDomainsRouteRoute
  MainNotificationsRouteRoute: typeof MainNotificationsRouteRoute
  MainQuizesRouteRoute: typeof MainQuizesRouteRoute
  MainUsersRouteRoute: typeof MainUsersRouteRoute
  MainWorkspacesRouteRoute: typeof MainWorkspacesRouteRoute
  MainAccountGeneralRouteRoute: typeof MainAccountGeneralRouteRoute
}

const MainRouteChildren: MainRouteChildren = {
  MainIndexRouteRoute: MainIndexRouteRoute,
  MainDomainsRouteRoute: MainDomainsRouteRoute,
  MainNotificationsRouteRoute: MainNotificationsRouteRoute,
  MainQuizesRouteRoute: MainQuizesRouteRoute,
  MainUsersRouteRoute: MainUsersRouteRoute,
  MainWorkspacesRouteRoute: MainWorkspacesRouteRoute,
  MainAccountGeneralRouteRoute: MainAccountGeneralRouteRoute,
}

const MainRouteWithChildren = MainRoute._addFileChildren(MainRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof MainRouteWithChildren
  '/confirm-email': typeof ConfirmEmailRoute
  '/login': typeof LoginRoute
  '/setup-admin': typeof SetupAdminRoute
  '/': typeof MainIndexRouteRoute
  '/domains': typeof MainDomainsRouteRoute
  '/notifications': typeof MainNotificationsRouteRoute
  '/quizes': typeof MainQuizesRouteRoute
  '/users': typeof MainUsersRouteRoute
  '/workspaces': typeof MainWorkspacesRouteRoute
  '/account/general': typeof MainAccountGeneralRouteRoute
}

export interface FileRoutesByTo {
  '/confirm-email': typeof ConfirmEmailRoute
  '/login': typeof LoginRoute
  '/setup-admin': typeof SetupAdminRoute
  '/': typeof MainIndexRouteRoute
  '/domains': typeof MainDomainsRouteRoute
  '/notifications': typeof MainNotificationsRouteRoute
  '/quizes': typeof MainQuizesRouteRoute
  '/users': typeof MainUsersRouteRoute
  '/workspaces': typeof MainWorkspacesRouteRoute
  '/account/general': typeof MainAccountGeneralRouteRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_main': typeof MainRouteWithChildren
  '/confirm-email': typeof ConfirmEmailRoute
  '/login': typeof LoginRoute
  '/setup-admin': typeof SetupAdminRoute
  '/_main/': typeof MainIndexRouteRoute
  '/_main/domains': typeof MainDomainsRouteRoute
  '/_main/notifications': typeof MainNotificationsRouteRoute
  '/_main/quizes': typeof MainQuizesRouteRoute
  '/_main/users': typeof MainUsersRouteRoute
  '/_main/workspaces': typeof MainWorkspacesRouteRoute
  '/_main/account/general': typeof MainAccountGeneralRouteRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/confirm-email'
    | '/login'
    | '/setup-admin'
    | '/'
    | '/domains'
    | '/notifications'
    | '/quizes'
    | '/users'
    | '/workspaces'
    | '/account/general'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/confirm-email'
    | '/login'
    | '/setup-admin'
    | '/'
    | '/domains'
    | '/notifications'
    | '/quizes'
    | '/users'
    | '/workspaces'
    | '/account/general'
  id:
    | '__root__'
    | '/_main'
    | '/confirm-email'
    | '/login'
    | '/setup-admin'
    | '/_main/'
    | '/_main/domains'
    | '/_main/notifications'
    | '/_main/quizes'
    | '/_main/users'
    | '/_main/workspaces'
    | '/_main/account/general'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  MainRoute: typeof MainRouteWithChildren
  ConfirmEmailRoute: typeof ConfirmEmailRoute
  LoginRoute: typeof LoginRoute
  SetupAdminRoute: typeof SetupAdminRoute
}

const rootRouteChildren: RootRouteChildren = {
  MainRoute: MainRouteWithChildren,
  ConfirmEmailRoute: ConfirmEmailRoute,
  LoginRoute: LoginRoute,
  SetupAdminRoute: SetupAdminRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_main",
        "/confirm-email",
        "/login",
        "/setup-admin"
      ]
    },
    "/_main": {
      "filePath": "_main.tsx",
      "children": [
        "/_main/",
        "/_main/domains",
        "/_main/notifications",
        "/_main/quizes",
        "/_main/users",
        "/_main/workspaces",
        "/_main/account/general"
      ]
    },
    "/confirm-email": {
      "filePath": "confirm-email.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/setup-admin": {
      "filePath": "setup-admin.tsx"
    },
    "/_main/": {
      "filePath": "_main/index/route.tsx",
      "parent": "/_main"
    },
    "/_main/domains": {
      "filePath": "_main/domains/route.tsx",
      "parent": "/_main"
    },
    "/_main/notifications": {
      "filePath": "_main/notifications/route.tsx",
      "parent": "/_main"
    },
    "/_main/quizes": {
      "filePath": "_main/quizes/route.tsx",
      "parent": "/_main"
    },
    "/_main/users": {
      "filePath": "_main/users/route.tsx",
      "parent": "/_main"
    },
    "/_main/workspaces": {
      "filePath": "_main/workspaces/route.tsx",
      "parent": "/_main"
    },
    "/_main/account/general": {
      "filePath": "_main/account/general/route.tsx",
      "parent": "/_main"
    }
  }
}
ROUTE_MANIFEST_END */
